<?php

/**
 * @file
 * Implements NARA CAPTCHA for use with the CAPTCHA module.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * @file
 * Verifies if user is a human without necessity to solve a CAPTCHA.
 */

/**
 * Implements hook_form_alter().
 */
function nara_captcha_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  if (isset($form['captcha'])) {
    if ($form['captcha']['#captcha_type'] == 'nara_captcha/NARA Captcha') {
      $form['#attached']['library'][] = 'nara_captcha/nara-captcha';
    }
  }
}

/**
 * Implements hook_preprocess_captcha().
 */
function nara_captcha_preprocess_captcha(&$variables) {
  if ($variables['element']['#captcha_type'] == 'nara_captcha/NARA Captcha') {
    $theme_setting = \Drupal::config('nara_captcha.settings');
    if ($theme_setting->get('theme') == '1') {
      $variables['details']['#attributes']['class'][] = 'nara-captcha-light-theme';
    }
    else {
      $variables['details']['#attributes']['class'][] = 'nara-captcha-dark-theme';
    }
  }
}

/**
 * Implements hook_captcha().
 */
function nara_captcha_captcha($op, $captcha_type = '', $captcha_sid = NULL) {
  switch ($op) {
    case 'list':
      return ['NARA Captcha'];

    case 'generate':
      if ($captcha_type == 'NARA Captcha') {
        $captcha = [];
        $config = \Drupal::config('nara_captcha.settings');
        $options = NULL;
        $url = '';
        $client = \Drupal::httpClient();
        $ids = get_captcha_items($config);
        $res = json_decode($client->request('GET', 'https://catalog.archives.gov/api/v1?naIds=' . $ids)->getBody()->getContents());
        $options = build_captcha_items($res);

        // Jump to accessible question.
        $captcha['form']['skip'] = [
          '#type' => 'inline_template',
          '#template' => '<a href="#edit-accessible-option" class="visually-hidden focusable skip-link">
            Skip Images to Accessible Question</a>',
        ];

        $captcha['form']['captcha_response'] = [
          '#type' => 'fieldset',
          '#title' => t("Check any images that don't include handwritten text."),
          '#tree' => TRUE,
        ];
        if ($res != NULL) {
          $captcha['form']['itemIds'] = [
            '#type' => 'hidden',
            '#value' => implode(',', $options[1]),
          ];

          $captcha['form']['objectNumbers'] = [
            '#type' => 'hidden',
            '#value' => implode(',', $options[2]),
          ];
          // How many items are known when validating.
          $captcha['solution'] = $config->get('number_of_known');

          // Captcha Checkboxes.
          foreach ($options[0] as $key => $value) {
            $captcha['form']['captcha_response'][$key] = [
              '#type' => 'checkbox',
              '#title' => $value,
              '#attributes' => [
                'class' => ['visually-hidden'],
              ],
            ];
          }
        }

        $accessible_word = get_accessible_word($config->get('accessibility_words'));

        $captcha['form']['accessible_option'] = [
          '#type' => 'checkbox',
          '#title' => t('Answer text based captcha question.'),
        ];

        $captcha['form']['word'] = [
          '#type' => 'hidden',
          '#value' => $accessible_word['word'],
        ];

        $captcha['form']['accessible_input'] = [
          '#type' => 'textfield',
          '#title' => $accessible_word['title'],
          '#states' => [
            'visible' => [
              ':input[name="accessible_option"]' => [
                ['checked' => TRUE],
              ],
            ],
          ],
        ];

        $captcha['form']['zoom'] = [
          '#type' => 'inline_template',
          '#template' => "<div id='nara-captcha-zoom' class='visually-hidden'><div id='inner-zoom'></div><a href='#' id='zoom-close'>Close Zoom</a></div>",
        ];

        $honeypot_machine_name = preg_replace('@[^a-z0-9-]+@', '_', strtolower($config->get('honeypot_fieldname')));
        $captcha['form'][$honeypot_machine_name] = [
          '#type' => 'textfield',
          '#title' => $config->get('honeypot_fieldname'),
          '#prefix' => '<div class="hidden">',
          '#suffix' => '</div>',
        ];

        $captcha['form']['logo'] = [
          '#type' => 'inline_template',
          '#template' => '<div class="nara-logo">
              <a href="https://www.archives.gov" target="_blank" rel="noopener nofollow">
                Powered by the <span>National Archives</span>
              </a>
          </div>',
        ];

        $captcha['captcha_validate'] = 'nara_captcha_validation';
        return $captcha;
      }
      break;
  }
}

/**
 * Create an array of 4 object ids to populate the Captcha.
 */
function get_accessible_word($word_list) {
  $new_word = [];
  $word_array = explode(',', $word_list);
  $word_count = count($word_array) - 1;
  $random_word = (string) $word_array[rand(0, $word_count)];
  $random_word_letters = str_split($random_word);

  $random_title = 'Please spell the following word: ';
  $random_title .= $random_word . '. ';

  for ($i = 0; $i < count($random_word_letters); $i++) {
    $random_title .= $random_word_letters[$i] . ' ';
  }
  $new_word['word'] = $random_word;
  $new_word['title'] = $random_title;
  return $new_word;
}

/**
 * Create an array of 4 object ids to populate the Captcha.
 */
function get_captcha_items($config) {
  $captcha_results = '';
  $known_ids;
  $unknown_ids;
  $random_position = [];

  // If either config is NULL return nothing.
  if ($config->get('known_ids') !== NULL) {
    $known_ids = explode(',', $config->get('known_ids'));
    // Set random position in layout for known.
    if ($config->get('number_of_known') == 1) {
      $random_position[0] = rand(0, 3);
    }
    else {
      for ($i = 0; $i < $config->get('number_of_known'); $i++) {
        if ($i % 2 == 0) {
          $random_position[$i] = rand(0, 1);
        }
        else {
          $random_position[$i] = rand(2, 3);
        }
      }
    }
  }
  else {
    return NULL;
  }

  if ($config->get('unknown_ids') !== NULL) {
    $unknown_ids = explode(',', $config->get('unknown_ids'));
  }
  else {
    return NULL;
  }

  // Get 4 object ids for the captcha.
  // There could be duplicates, but can fix later if happens a lot.
  for ($i = 0; $i < 4; $i++) {
    if ($i === $random_position[0]) {
      $max = count($known_ids) - 1;
      $captcha_results .= (string) $known_ids[rand(0, $max)] . ',';
    }
    elseif (isset($random_position[1]) && $i === $random_position[1]) {
      $max = count($known_ids) - 1;
      $captcha_results .= (string) $known_ids[rand(0, $max)] . ',';
    }
    else {
      $max = count($unknown_ids) - 1;
      $captcha_results .= (string) $unknown_ids[rand(0, $max)] . ',';
    }
  }
  return trim($captcha_results, ',');
}

/**
 * Build the checkboxes for Captcha form.
 */
function build_captcha_items($res) {
  $options = [];
  // Build an array of results, adding in known id.
  foreach ($res->opaResponse->results->result as $key => $value) {
    if (is_array($value->objects->object)) {
      $image_counter = 0;
      foreach ($value->objects->object as $obKey => $obValue) {
        if (($obValue->file->{'@mime'} === "image/jpeg") && $image_counter < 1) {
          $url = $obValue->file->{'@url'};
          $options[2][$key] = $value->objects->object[$obKey]->{'@id'};
          $image_counter++;
        }
      }
    }
    else {
      $url = $value->objects->object->file->{'@url'};
      $options[2][$key] = (string) $value->objects->object->{'@id'};
    }

    // Save $value->description->item->title.
    $option_description = $value->description->item->title;
    $options[0][$key] = '<span class="captcha-response-item"><img class="captcha-image" src="' . $url . '" alt="' . $option_description . '" title="' . $option_description . '" /><a href="#" class="captcha-zoom">Zoom Image</a></span>';
    $options[1][$key] = $value->naId;
  }
  return $options;
}

/**
 * Custom Validation.
 */
function nara_captcha_validation($solution, $response, $element, $form_state) {
  $config = \Drupal::config('nara_captcha.settings');
  ksm($response);
  // A quick honeypot style validation.
  // If the field is filled in return FALSE with error message.
  $honeypot_machine_name = preg_replace('@[^a-z0-9-]+@', '_', strtolower($config->get('honeypot_fieldname')));
  if ($form_state->getValue($honeypot_machine_name)) {
    drupal_set_message(t('You have filled out @honeypot, please leave blank.', ['@honeypot' => $config->get('honeypot_fieldname')]), 'error');
    return FALSE;
  }

  // Check to see if Accessibility Option was checked.
  if ($form_state->getValue('accessible_option') === 1) {
    if ($form_state->getValue('accessible_input') === $form_state->getValue('word')) {
      return TRUE;
    }
    else {
      drupal_set_message(t('The text entered does not match, please try again.'), 'error');
      return FALSE;
    }
  }

  // Compare each option ID to known id list & return false if there is a match.
  if ($form_state->getValue('itemIds') && $form_state->getValue('objectNumbers')) {
    $itemIds = explode(',', $form_state->getValue('itemIds'));
    $objectNumbers = explode(',', $form_state->getValue('objectNumbers'));
    $known_ids = explode(',', $config->get('known_ids'));
    foreach ($response as $key => $value) {
      if ($value != 0) {
        if (in_array($itemIds[$value], $known_ids)) {
          return FALSE;
        }
        else {
          tag_image($config, $itemIds[$value], $objectNumbers[$value]);
        }
      }
    }

    return TRUE;
  }
}

/**
 * Custom Validation.
 */
function tag_image($config, $naid, $position) {
  $token = $config->get('api_token');
  $tag = $config->get('tag');
  $api_url = $config->get('api_url');
  $client = \Drupal::httpClient();

  $res = $client->request('POST', $api_url . 'id/' . $naid . '/objects/' . $position . '/tags?text=' . $tag, ['headers' => ['Authorization' => $token]]);
  ksm(json_decode($res->getBody()->getContents()));
}
